#!/usr/bin/env python3

import logging
import os

from mtrain.training import TrainingMoses, TrainingNematus
from mtrain import constants as C
from mtrain import checker, assertions
from mtrain.arguments import get_training_parser, check_environment, check_arguments


def set_up_logging(args):
    # initialize logging to STDERR
    # check existence of '--output_dir' before creating logfile
    assertions.dir_exists(
        args.output_dir,
        raise_exception="%s does not exist" % args.output_dir
    )
    # log all events to file
    logging.basicConfig(
        filename=args.output_dir + os.sep + 'training.log',
        level=logging.DEBUG,
        format='%(asctime)s - mtrain - %(levelname)s - %(message)s'
    )
    # log WARNING and above (or as specified by user) to stdout
    console = logging.StreamHandler()
    console.setLevel(C.LOGGING_LEVELS[args.logging])
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logging.getLogger("").addHandler(console)

    logging.info(args)


def perform_checks(args):
    """
    Check python version, environment, arguments.
    """
    # abort if Python version is not supported
    checker.check_python_version()
    # abort if environment variables are not set
    check_environment(args)
    # abort if arguments are incompatible
    check_arguments(args)


def main():
    parser = get_training_parser()
    args = parser.parse_args()

    perform_checks(args)

    set_up_logging(args)

    logging.info("Configured backend: %s" % args.backend)

    if args.tune:
        try:
            args.tune = int(args.tune)
        except ValueError:
            pass  # string is fine; means path to external tuning corpus was provided
    elif args.backend == C.BACKEND_NEMATUS:
        # validation data is mandatory for Nematus models
        logging.warning("No tuning corpus was provided with -t/--tune, taking 2000 segments" +
                        " from the training corpus at random.")
        args.tune = 2000

    if args.eval:
        try:
            args.eval = int(args.eval)
        except ValueError:
            pass  # string is fine; means path to external evalution corpus was provided

    if args.backend == C.BACKEND_MOSES:

        training = TrainingMoses(
            basepath=args.output_dir,
            src_lang=args.src_lang,
            trg_lang=args.trg_lang,
            casing_strategy=args.caser,
            tuning=args.tune,
            evaluation=args.eval,
            masking_strategy=args.masking,
            xml_strategy=args.xml_input
        )

        logging.info("Start preprocessing.")
        training.preprocess(
            corpus_base_path=args.basepath,
            min_tokens=args.min_tokens,
            max_tokens=args.max_tokens,
            preprocess_external=args.preprocess_external_tune,
            mask=bool(args.masking),
            process_xml=bool(args.xml_input)
        )
        # continue preprocessing: apply casing strategy
        if args.caser == C.TRUECASING:
            training.train_truecaser()
            training.truecase()
        elif args.caser == C.RECASING:
            training.train_recaser(
                args.threads,
                args.temp_dir,
                args.keep_uncompressed_models
            )

        # initiate training
        training.train_engine(
            n=args.n_gram_order,
            alignment='grow-diag-final-and',  # todo: make changeable
            max_phrase_length=7,  # todo: make changeable
            reordering='msd-bidirectional-fe',  # todo: make changeable
            num_threads=args.threads,
            path_temp_files=args.temp_dir,
            keep_uncompressed=args.keep_uncompressed_models
        )

        # initiate tuning
        if args.tune:
            training.tune(args.threads)

        # symlink to final 'moses.ini'
        training.write_final_ini()

        # initiate evaluation
        if args.eval:
            training.evaluate(
                num_threads=args.threads,
                lowercase_eval=False,
                detokenize_eval=True,
                strip_markup_eval=False,
                extended=args.extended_eval
            )

    elif args.backend == C.BACKEND_NEMATUS:

        training = TrainingNematus(
            basepath=args.output_dir,
            src_lang=args.src_lang,
            trg_lang=args.trg_lang,
            casing_strategy=args.caser,
            tuning=args.tune,
            evaluation=args.eval
        )

        logging.info("Start preprocessing.")
        training.preprocess(
            corpus_base_path=args.basepath,
            min_tokens=args.min_tokens,
            max_tokens=args.max_tokens,
            preprocess_external=args.preprocess_external_tune
        )
        # continue preprocessing: apply truecasing
        training.train_truecaser()
        training.truecase()
        # continue preprocessing: byte-pair encoding for backend nematus
        # set default for '--bpe_ops' here
        training.bpe_encoding(bpe_operations=args.bpe_ops)

        # initiate training
        training.train_engine(
            device_train=args.device_train,
            preallocate_train=args.preallocate_train,
            device_validate=args.device_validate,
            preallocate_validate=args.preallocate_validate,
            validation_frequency=args.validation_freq,
            external_validation_script=args.external_validation_script,
            max_epochs=args.max_epochs,
            max_updates=args.max_updates
        )

        # TODO: eval


if __name__ == '__main__':

    # run main routine
    main()
