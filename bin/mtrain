#!/usr/bin/env python3

import logging
import argparse
import sys
import os

from mtrain.training import TrainingBase, TrainingMoses, TrainingNematus
from mtrain.constants import *
from mtrain import checker, assertions

LOGGING_LEVELS = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL,
}

def get_argument_parser():
    parser = argparse.ArgumentParser()
    parser.description = ("Trains either a Moses-based statistical machine translation system " +
        "or a Nematus-based neural network translation system.")
    parser.add_argument(
        "basepath",
        type=str,
        help="common path/file prefix of the training corpus' source and " +
        "target side, e.g., `/foo/bar/training_corpus`"
    )
    parser.add_argument(
        "src_lang",
        type=str,
        help="source language code: valid choices are `" +
            "`, `".join([lang for lang in sorted(MOSES_TOKENIZER_LANG_CODES.keys())]) +
            "`",
        choices=MOSES_TOKENIZER_LANG_CODES.keys(),
        metavar='src_lang' #overrides ugly double-listing of available choices in --help
    )
    parser.add_argument(
        "trg_lang",
        type=str,
        help="target language code: same valid choices as in src_lang",
        choices=MOSES_TOKENIZER_LANG_CODES.keys(),
        metavar='trg_lang' #overrides ugly double-listing of available choices in --help
    )
    parser.add_argument(
        "--backend", # "-b" removed, conflicting with --bpe_ops
        type=str,
        help="decide which backend is to be used as training engine." +
            " Valid choices are: " +
            "; ".join(["`%s`: %s" % (name, descr) for name, descr in BACKEND_CHOICES.items()]),
        choices=BACKEND_CHOICES.keys(),
        default='moses'
    )
    parser.add_argument(
        "-o", "--output_dir",
        type=str,
        help="target directory for all output. The curent working directory " +
            "($PWD) is used by default.",
        default=os.getcwd()
    )
    parser.add_argument(
        "-c", "--caser",
        type=str,
        help="casing strategy: " +
            "; ".join(["`%s`: %s" % (name, descr) for name, descr in CASING_STRATEGIES.items()]),
        choices=CASING_STRATEGIES.keys(),
        default="recasing"
    )
    parser.add_argument(
        "-t", "--tune",
        help="enable tuning. If an integer is provided, the given number of " +
            "segments will be randomly taken from the training corpus " +
            "(basepath). Alternatively, the basepath to a separate tuning " +
            "corpus can be provided. Examples: `2000`, `/foo/bar/tuning_corpus`"
    )
    parser.add_argument(
        "-e", "--eval",
        help="enable evaluation. If an integer is provided, the given number " +
            "of segments will be randomly taken from the training corpus " +
            "(basepath). Alternatively, the basepath to a separate evaluation " +
            "corpus can be provided. Examples: `2000`, `/foo/bar/eval_corpus`"
    )
    parser.add_argument(
        "--eval_lowercase",
        help="lowercase reference and translation before evaluation. Otherwise," +
            "evaluation uses the engine's casing strategy.",
        default=False,
        action='store_true'
    )
    parser.add_argument(
        "--preprocess_external_tune",
        help="preprocess external tuning corpus. Don't use if " +
            "the external files provided in --tune are already preprocessed.",
        default=False,
        action='store_true'
    )
    parser.add_argument(
        "--masking",
        help="enable masking. Valid strategies are: " +
            "; ".join(["`%s`: %s" % (name, descr) for name, descr in MASKING_STRATEGIES.items()]),
        choices=MASKING_STRATEGIES.keys(),
        default=None
    )
    parser.add_argument(
        "-n", "--n_gram_order",
        type=int,
        help="the language model's n-gram order",
        default=5
    )
    parser.add_argument(
        "--min_tokens",
        type=int,
        help="the minimum number of tokens per segments; segments with less " +
            "tokens will be discarded",
        default=1
    )
    parser.add_argument(
        "--max_tokens",
        type=int,
        help="the maximum number of tokens per segments; segments with more " +
            "tokens will be discarded",
        default=80
    )
    parser.add_argument(
        "--threads",
        type=int,
        help="the number of threads to be used at most",
        default=8
    )
    parser.add_argument(
        "--temp_dir",
        help="directory for temporary files created during trainig",
        default="/tmp"
    )
    parser.add_argument(
        "--keep_uncompressed_models",
        help="do not delete uncompressed models created during training",
        action='store_true'
    )
    parser.add_argument(
        "--logging",
        help="logging level in STDERR",
        choices=LOGGING_LEVELS.keys(),
        default="INFO"
    )
    parser.add_argument(
        "--xml_input",
        type=str,
        help="decide how XML fragments in the input segments should " +
            "be dealt with. Valid choices are: " +
            "; ".join(["`%s`: %s" % (name, descr) for name, descr in XML_STRATEGIES.items()]),
        choices=XML_STRATEGIES.keys(),
        default=None
    )
    parser.add_argument(
        "--extended_eval",
        action="store_true",
        help="perform multiple evaluations that vary the appearance of the test files: " +
            "lowercased or not, detokenized or not, with markup or without.",
        default=False
    )

    # arguments specifically for backend nematus ###BH todo test checking of nematus args
    nematus_args = parser.add_argument_group("Nematus arguments")

    nematus_args.add_argument(
        "--bpe_ops", # only for backend nematus
        type=int,
        help="decide how many byte-pair operations are to be performed when learning the " +
        "byte-pair encoding model with nematus backend. Default is 89500 operations."
        # set default when calling bpe_encoding() below, but NOT here as it would trigger warning for backend moses
        ###BH current testing default 1000, reset to default 89500
    )
    nematus_args.add_argument(
        "--preprocessing_only", # only for backend nematus
        action="store_true",
        help="choose when only preprocessing for backend nematus shall be executed, " +
        "e.g. when you need to verify or backup preprocessed data before training",
        default=False
    )
    nematus_args.add_argument(
        "--training_only", # only for backend nematus
        action="store_true",
        help="choose when only training for backend nematus shall be executed, " +
        "e.g. when you already preprocessed data",
        default=False
    )
    nematus_args.add_argument(
        "--device_train", # only for backend nematus
        type=str,
        help="choose a free gpu for nematus training, consult your server responsible " +
            "to learn about appropriate settings"
        # do NOT set default as it would trigger warning for backend moses. settings are server specific, thus enforced from user.
    )
    nematus_args.add_argument(
        "--preallocate_train", # only for backend nematus
        type=str,
        help="preallocate gpu memory for nematus training if applicable on your server. " +
            "Do not preallocate more than '0.8' = 80 percent of memory. " +
            "The system will automatically use more memory if available and safe."
        # do NOT set default as it would trigger warning for backend moses. settings are server specific, thus enforced from user.
    )
    nematus_args.add_argument(
        "--device_validate", # only for backend nematus
        type=str,
        help="choose a free gpu for nematus validation, consult your server responsible " +
            "to learn about appropriate settings. " + 
            "Omit if --external_validation_script is provided."
        # do NOT set default as it would trigger warning for backend moses. settings are server specific, thus enforced from user.
    )
    nematus_args.add_argument(
        "--preallocate_validate", # only for backend nematus
        type=str,
        help="preallocate gpu memory for nematus validation if applicable on your server. " +
            "Do not preallocate more than '0.3' = 30 percent of memory. " +
            "The system will automatically use more memory if available and safe."
            "Omit if --external_validation_script is provided."
        # do NOT set default as it would trigger warning for backend moses. settings are server specific, thus enforced from user.
    )
    nematus_args.add_argument(
        "--external_validation_script", # only for backend nematus
        type=str,
        help="optional path to external validation script that is called during " +
            "training of nematus engine. If chosen, also a preprocessing script " +
            "must be provided which is called by the validation script. " +
            "See https://github.com/rsennrich/wmt16-scripts/blob/master/sample/validate.sh " +
            "and https://github.com/rsennrich/wmt16-scripts/blob/master/sample/postprocess-dev.sh " +
            "for examples and adapt all parameters, corpora, models etc. accordingly. " +
            "Do not use if you want mtrain to manage external validation.",
        default=None
    )
    return parser

###BH todo test
def check_arguments_moses(args):
    '''
    Check for arguments unfit for moses, either combination or specific argument may
    be not (yet) applicable for the backend. Depending on severity, user is warned and maybe
    program terminated.

    @param args all arguments passed from get_argument_parser()
    '''
    # generic masking and XML masking currently not possible at the same time for backend moses
    if args.masking and args.xml_input == XML_MASK:
        logging.critical("Invalid command line options. Choose either '--masking' or " +
            "'--xml_input mask', but not both. See '-h'/'--help' for more information.")
        sys.exit()

    # for backend moses, ignore nematus specific arguments, warn user but continue processing
    if args.bpe_ops:
        logging.warning("Invalid command line options. For '--backend %s', " +
            "'--bpe_ops' is not applicable and will be ignored. " +
            "See '-h'/'--help' for more information.", BACKEND_MOSES)
    if args.preprocessing_only or args.training_only:
        logging.warning("Invalid command line options. For '--backend %s', " +
            "neither '--preprocessing_only' nor '--training_only' are applicable and will be ignored. " +
            "See '-h'/'--help' for more information.", BACKEND_MOSES)
    if args.device_train or args.preallocate_train or args.device_validate or args.preallocate_validate or args.external_validation_script != None:
        logging.warning("Invalid command line options. For '--backend %s', " +
            "'--device_train', '--preallocate_train', '--device_validate', '--preallocate_validate' " +
            "and '--external_validation_script' are not applicable and will be ignored. " +
            "See '-h'/'--help' for more information.", BACKEND_MOSES)

###BH todo test
def check_arguments_nematus(args):
    '''
    Check for arguments unfit for nematus, either combination or specific argument may
    be not (yet) applicable for the backend. Depending on severity, user is warned and maybe
    program terminated.

    @param args all arguments passed from get_argument_parser()
    '''
    # currently neither generic masking nor XML masking for backend nematus
    if args.masking or args.xml_input:
        logging.critical("Invalid command line options. For '--backend %s', " +
            "neither '--masking' nor '--xml_input' are applicable yet. " +
            "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
        sys.exit()

    # prevent argument combination that results in the program doing nothing
    if args.preprocessing_only and args.training_only:
        logging.critical("Invalid command line options. For '--backend %s', " +
            "do not choose '--preprocessing_only' and '--training_only' " +
            "simultaneously as the program would not process anything. " +
            "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
        sys.exit()

    # ensure tuning corpus is being provided in preprocessing for later training,
    # either --tune INT or --tune STR (if preprocessed) is fine
    if args.training_only != True and args.tune == None:
        logging.critical("Invalid command line options. For '--backend %s', " +
            "you need to choose '--tune' in preprocessing as subsequent " +
            "training will not work without a preprocessed tuning corpus. "
            "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
        sys.exit()

    # currently no casing other than truecasing for backend nematus, warn and continue using 'TRUECASING'
    if args.caser != TRUECASING:
        logging.warning("Invalid command line options. For '--backend %s', " +
            "only '%s' is applicable as casing strategy and will therefore be used. " +
            "See '-h'/'--help' for more information.", BACKEND_NEMATUS, TRUECASING)
        args.caser = TRUECASING

    # preemptive measures: exit when arguments and/or external scripts necessary for training are missing,
    # ensures that user is not wasting time when training is impossible

    # check for training to be executed
    if args.preprocessing_only != True:
        # check if mtrain-managed external validation chosen (meaning no user-defined scripts provided)
        if not isinstance(args.external_validation_script, str):
            # check arguments necessary for training and mtrain-managed external validation
            if not args.device_train or not args.preallocate_train or not args.device_validate or not args.preallocate_validate:
                logging.critical("Invalid command line options. For '--backend %s', " +
                    "server specific options necessary for training must be set. " +
                    "Consult your server responsible on how to choose '--device_train', " +
                    "'--preallocate_train', '--device_validate' and '--preallocate_validate' " +
                    "adequately. " +
                    "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
                sys.exit()
        # user-defined external validation script chosen
        else:
            # check arguments necessary for training
            if not args.device_train or not args.preallocate_train:
                logging.critical("Invalid command line options. For '--backend %s', " +
                    "server specific options necessary for training must be set. " +
                    "Consult your server responsible on how to choose '--device_train', " +
                    "and '--preallocate_train' adequately. " +
                    "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
                sys.exit()
            # check obsolete arguments for validation, must be provided in user-defined script instead
            if args.device_validate or args.preallocate_validate:
                logging.critical("Invalid command line options. For '--backend %s' " +
                    "using your own external validation script during training, " +
                    "'--device_validate' and '--preallocate_validate' are not " +
                    "applicable and must be set in the external script instead. " +
                    "See '-h'/'--help' for more information.", BACKEND_NEMATUS)
                sys.exit()

def main():
    parser = get_argument_parser()
    args = parser.parse_args()
    # parse arguments
    if args.tune:
        try:
            args.tune = int(args.tune)
        except ValueError:
            pass # string is fine; means path to external tuning corpus was provided
    if args.eval:
        try:
            args.eval = int(args.eval)
        except ValueError:
            pass # string is fine; means path to external evalution corpus was provided

    # initialize logging
    # check existence of args.output_dir before creating logfile
    assertions.dir_exists(
        args.output_dir,
        raise_exception="%s does not exist" % args.output_dir
    )
    # log all events to file
    logging.basicConfig(
        filename=args.output_dir + os.sep + 'training.log',
        level=logging.DEBUG,
        format='%(asctime)s - mtrain - %(levelname)s - %(message)s'
    )
    # log WARNING and above (or as specified by user) to stdout
    console = logging.StreamHandler()
    console.setLevel(LOGGING_LEVELS[args.logging])
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logging.getLogger("").addHandler(console)

    # distinguish chosen backend
    if args.backend == BACKEND_MOSES:

        # check if arguments suiting moses
        check_arguments_moses(args)

        # create instance of Training subclass suiting backend
        training = TrainingMoses(
            basepath=args.output_dir,
            src_lang=args.src_lang,
            trg_lang=args.trg_lang,
            casing_strategy=args.caser,
            tuning=args.tune,
            evaluation=args.eval,
            masking_strategy=args.masking,
            xml_strategy=args.xml_input
        )

        # initiate preprocessing
        logging.info("Initiating preprocessing for backend %s", args.backend)
        training.preprocess(
            corpus_base_path=args.basepath, ###BH @MM: changed from 'base_corpus_path=args.basepath,'
            min_tokens=args.min_tokens,
            max_tokens=args.max_tokens,
            preprocess_external=args.preprocess_external_tune,
            mask=bool(args.masking),
            process_xml=bool(args.xml_input)
        )
        # continue preprocessing: apply casing strategy
        if args.caser == TRUECASING:
            training.train_truecaser()
            training.truecase()
        elif args.caser == RECASING:
            training.train_recaser(
                args.threads,
                args.temp_dir,
                args.keep_uncompressed_models
            )

        # initiate training
        training.train_engine(
            n=args.n_gram_order,
            alignment='grow-diag-final-and', # todo: make changeable
            max_phrase_length=7, # todo: make changeable
            reordering='msd-bidirectional-fe', # todo: make changeable
            num_threads=args.threads,
            path_temp_files=args.temp_dir,
            keep_uncompressed=args.keep_uncompressed_models
        )

        # initiate tuning
        if args.tune:
            training.tune(args.threads)

        # symlink to final 'moses.ini'
        training.write_final_ini()

        # initiate evaluation
        if args.eval:
            # abort if MULTEVAL_HOME environment variable is not set
            checker.check_environment_variable(MULTEVAL_HOME, 'MULTEVAL_HOME', 'multeval.sh')
            training.evaluate(
                num_threads=args.threads,
                lowercase_eval=False,
                detokenize_eval=True,
                strip_markup_eval=False,
                extended=args.extended_eval
            )

    # distinguish chosen backend
    if args.backend == BACKEND_NEMATUS:

        ##BH todo
        #check_environment_nematus()

        # abort if environment variables needed for nematus backend are not set
        ###BH obsolete?# checker.check_environment_variable(WMT16_HOME, 'WMT16_HOME', 'wmt16-scripts')
        checker.check_environment_variable(SUBWORD_NMT_HOME, 'SUBWORD_NMT_HOME', 'subword-nmt')
        checker.check_environment_variable(NEMATUS_HOME, 'NEMATUS_HOME', 'nematus')
        ###BH todo check for further env variables necessary for nematus

        # check if arguments suiting nematus
        check_arguments_nematus(args)

        # create instance of Training subclass suiting backend
        training = TrainingNematus(
            basepath=args.output_dir,
            src_lang=args.src_lang,
            trg_lang=args.trg_lang,
            casing_strategy=args.caser,
            tuning=args.tune,
            evaluation=args.eval
        )

        # check for preprocessing to be executed
        if args.training_only != True:
            # initiate preprocessing
            logging.info("Initiating preprocessing for backend %s", args.backend)
            training.preprocess(
                corpus_base_path=args.basepath, ###BH @MM: changed from 'base_corpus_path=args.basepath,'
                min_tokens=args.min_tokens,
                max_tokens=args.max_tokens,
                preprocess_external=args.preprocess_external_tune
            )
            # continue preprocessing: apply casing strategy
            training.train_truecaser()
            training.truecase()
            # continue preprocessing: byte-pair encoding for backend nematus
            # set default if  no '--bpe_ops' chosen from command line
            training.bpe_encoding(bpe_operations=1000 if args.bpe_ops == None else args.bpe_ops)
        else:
            # chosen not to preprocess data
            logging.warning("No preprocessing: Only training chosen to be executed")

        # check for training to be executed
        if args.preprocessing_only != True:
            # initiate training
            training.train_engine(
                device_train=args.device_train,
                preallocate_train=args.preallocate_train,
                device_validate=args.device_validate,
                preallocate_validate=args.preallocate_validate,
                external_validation_script=args.external_validation_script)
        else:
            # chosen not to train engine
            logging.warning("No training: Only preprocessing chosen to be executed")

if __name__ == '__main__':
    # abort if Python version is not supported
    checker.check_python_version()
    # abort if environment variables are not set
    checker.check_environment_variable(MOSES_HOME, 'MOSES_HOME', 'moses')
    checker.check_environment_variable(FASTALIGN_HOME, 'FASTALIGN_HOME', 'fast_align')
    # run main routine
    main()

    ###BH check if further env vars to be distinguished for backends (e.g. FASTALIGN_HOME, depending on training etc.)
