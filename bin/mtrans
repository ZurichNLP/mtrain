#!/usr/bin/env python3

import fileinput
import logging
import argparse
import sys
import os

from mtrain.translation import TranslationEngine
from mtrain.constants import *
from mtrain import checker

def get_argument_parser():
    parser = argparse.ArgumentParser()
    parser.description = "Translates text using a Moses-based machine translation system trained with `mtrain`."
    parser.add_argument(
        "basepath",
        type=str,
        help="base path of the machine translation system, i.e., the output " +
        "directory (-o) used in `mtrans`."
    )
    parser.add_argument(
        "src_lang",
        type=str,
        help="source language code: valid choices are `" +
            "`, `".join([lang for lang in sorted(MOSES_TOKENIZER_LANG_CODES.keys())]) +
            "`",
        choices=MOSES_TOKENIZER_LANG_CODES.keys(),
        metavar='src_lang' #overrides ugnly double-listing of available choices in --help
    )
    parser.add_argument(
        "trg_lang",
        type=str,
        help="target language code: same valid choices as in src_lang",
        choices=MOSES_TOKENIZER_LANG_CODES.keys(),
        metavar='trg_lang' #overrides ugnly double-listing of available choices in --help
    )
    parser.add_argument(
        "-l", "--lowercase",
        help="lowercase translated text",
        default=False,
        action='store_true'
    )
    parser.add_argument(
        "--logging",
        help="logging level in stderr",
        choices=LOGGING_LEVELS.keys(),
        default="DEBUG"
    )
    return parser

def main():
    parser = get_argument_parser()
    args = parser.parse_args()
    # initialize logging (stderr)
    console = logging.StreamHandler()
    console.setLevel(LOGGING_LEVELS[args.logging])
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logging.getLogger("").addHandler(console)
    # translation
    engine = TranslationEngine(args.basepath, args.src_lang, args.trg_lang)
    for line in sys.stdin: # read stdin
        source_segment = line.strip()
        if source_segment != '':
            translation = engine.translate(source_segment, preprocess=True, args.lowercase, detokenize=True) # todo: make last two arguments changeable
            # uppercase translation's first letter if first letter in source_segment is uppercased
            if not args.lowercase and source_segment[0].isupper():
                translation = translation[0].upper() + translation[1:]
            print(translation)

if __name__ == '__main__':
    # abort if Python version is not supported
    checker.check_python_version()
    # abort if MOSES_HOME environment variable is not set
    checker.check_environment_variable(MOSES_HOME, 'MOSES_HOME', 'moses')
    # run main routine
    main()
