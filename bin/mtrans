#!/usr/bin/env python3

"""
Command line interface for translation.
"""

import sys
import os
import tempfile
import logging

from mtrain.translation import TranslationEngineMoses, TranslationEngineNematus
from mtrain import constants as C
from mtrain import checker
from mtrain.arguments import get_translation_parser, check_trans_arguments
from mtrain.utils import set_up_logging, infer_backend


def perform_checks(args):
    """
    Check python version, environment, arguments.
    """
    # abort if Python version is not supported
    checker.check_python_version()
    # abort if environment variables are not set
    checker.check_environment(args)
    # abort if arguments are incompatible
    check_trans_arguments(args)

def main():
    """
    Main translation interface.
    """
    parser = get_translation_parser()
    args = parser.parse_args()

    args.backend = infer_backend(args)

    perform_checks(args)
    set_up_logging(args, mode="translate")

    # distinguish chosen backend
    if args.backend == C.BACKEND_MOSES:

        # instantiating moses translation engine
        engine = TranslationEngineMoses(basepath=args.basepath,
                                        training_config=None)

        for line in sys.stdin: # read stdin
            source_segment = line.strip()
            if source_segment != '':
                translation = engine.translate_segment(
                    source_segment,
                    preprocess=not(args.skip_preprocess),
                    lowercase=args.lowercase,
                    detokenize=not(args.skip_detokenize)
                )
                # uppercase translation's first letter if first letter in source_segment is uppercased
                if not args.lowercase and source_segment[0].isupper():
                    translation = translation[0].upper() + translation[1:]
                sys.stdout.write(translation + '\n')

    elif args.backend == C.BACKEND_NEMATUS:

        engine = TranslationEngineNematus(args.basepath,
                                          training_config=None,
                                          device=args.device,
                                          preallocate=args.preallocate,
                                          beam_size=args.beam_size,
                                          keep_temp_files=args.keep_temp_files)

        # Note: MM:
        # Text must be translated as a whole, even from STDIN, because
        # the Nematus script translate.py does not process line-by-line
        tempdir = tempfile.mkdtemp()
        input_handle = tempfile.NamedTemporaryFile(prefix="input.", dir=tempdir, mode="w", encoding="utf-8", delete=False)
        input_path = input_handle.name
        output_handle = tempfile.NamedTemporaryFile(prefix="output.", dir=tempdir, mode="w", encoding="utf-8", delete=False)
        output_path = output_handle.name

        logging.debug("tempdir=%s, input_path=%s, output_path=%s", tempdir, input_path, output_path)

        for line in sys.stdin:
            input_handle.write(line)

        input_handle = open(input_path, "r")

        engine.translate_file(input_handle=input_handle, output_handle=output_handle)

        output_handle = open(output_path, "r")

        for line in output_handle:
            sys.stdout.write(line)

        input_handle.close()
        output_handle.close()

        if not args.keep_temp_files:
            os.remove(input_path)
            os.remove(output_path)
            os.rmdir(tempdir)


if __name__ == '__main__':
    main()
